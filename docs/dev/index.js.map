{"version":3,"file":"index.js","sources":["../../vite/modulepreload-polyfill","../../src/assets/logo.png","../../src/vimReact.tsx","../../src/vimWebApp.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","export default \"__VITE_ASSET__93547066__\"","// eslint-disable-next-line no-use-before-define\r\nimport React, { useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {ViewerState} from 'vim-webgl-viewer'\r\nimport urlLogo from './assets/logo.png'\r\nimport './style.css'\r\n\r\nconst canvasId = 'vim-canvas'\r\n\r\nexport function buildUI (): [string, React.Dispatch<React.SetStateAction<string>>] {\r\n  // Create container for React\r\n  const ui = document.createElement('div')\r\n  ui.className = 'vim'\r\n  ui.style.height = '100%'\r\n  document.body.append(ui)\r\n\r\n  const [msg, setProgress] = useState('')\r\n  // Render\r\n  ReactDOM.render(<VimUI msg={msg} setter={setProgress} />, ui)\r\n  return [canvasId, setProgress]\r\n}\r\n\r\nfunction VimUI (props: { msg: string, setter: React.Dispatch<React.SetStateAction<string>> }) {\r\n  \r\n  return (\r\n    <>\r\n      <canvas id={canvasId}> </canvas>\r\n      <Logo />\r\n      <VimLoadingBox msg={props.msg} />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction Logo () {\r\n  return (\r\n    <div className=\"vim-logo\">\r\n      <a href=\"https://vimaec.com\">\r\n        <img src={urlLogo}></img>\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction FormatStateMessage (state: ViewerState): string {\r\n\r\n  if (state[0] === 'Downloading') {\r\n    return `Downloading: ${Math.round((state[1] as number) / 1000000)} MB`\r\n  }\r\n  if (state[0] === 'Error') {\r\n    return 'Error : ' + (state[1] as ErrorEvent).message\r\n  }\r\n  if (state === 'Processing') return 'Processing'\r\n}\r\n\r\nfunction VimLoadingBox (prop: { msg: string }) {\r\n  if (!prop.msg) return null\r\n  return (\r\n    <div className=\"vim-loading-box\">\r\n      <h1> {prop.msg} </h1>\r\n    </div>\r\n  )\r\n}\r\n","//import { settingsGui } from './settingsGui'\r\nimport { buildUI } from './vimReact'\r\nimport {Viewer} from 'vim-webgl-viewer'\r\nimport {TransparencyMode, transparencyIsValid} from 'vim-webgl-viewer'\r\nimport Stats from 'stats-js'\r\n\r\n// Parse URL\r\nconst params = new URLSearchParams(window.location.search)\r\nlet url = params.has('vim')\r\n  ? params.get('vim')\r\n  : 'https://vim.azureedge.net/samples/residence.vim'\r\n\r\nurl = params.has('model')\r\n? params.get('model')\r\n: 'https://vim.azureedge.net/samples/residence.vim'\r\n\r\nlet transparency = 'all' as TransparencyMode\r\nif (params.has('transparency')) {\r\n  const t = params.get('transparency')\r\n  transparency = transparencyIsValid(t) ? t : 'all'\r\n}\r\n\r\n// Create Viewer\r\nconst [canvasId, setProgress] = buildUI()\r\n\r\nconst viewer = new Viewer({\r\n  canvas: {id : canvasId},\r\n  plane: {\r\n    show: true,\r\n    texture:\r\n      'https://vimdevelopment01storage.blob.core.windows.net/textures/vim-floor-soft.png',\r\n    opacity: 1,\r\n    size: 5\r\n  }\r\n})\r\n\r\n\r\n// Load Model\r\nviewer.loadVim(\r\n  url,\r\n  {\r\n    transparency: transparency,\r\n    rotation: { x: 270, y: 0, z: 0 }\r\n  },\r\n  (result) => console.log('Callback: Viewer Ready!'),\r\n  (progress) => {\r\n    const msg = progress === 'processing' ? 'Processing' : `Downloading: ${progress.loaded / 1000000} MB`\r\n    setProgress(msg)\r\n  },\r\n  (error) => console.error('Callback: Error: ' + error.message)\r\n)\r\n\r\n// Make viewer accessible in console\r\nglobalThis.viewer = viewer\r\n\r\n/*\r\n// Add a new DAT.gui controller\r\nsettingsGui.bind(viewer.settings, (settings) => {\r\n  viewer.settings = settings\r\n  viewer.ApplySettings()\r\n})\r\n*/\r\n\r\n// Add Stats display\r\nconst stats = new Stats()\r\nstats.dom.style.top = '84px'\r\nstats.dom.style.left = '16px'\r\ndocument.body.appendChild(stats.dom)\r\nanimate()\r\n\r\nfunction animate () {\r\n  requestAnimationFrame(() => animate())\r\n\r\n  if (stats) {\r\n    stats.update()\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"names":["canvasId","useState"],"mappings":"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"}